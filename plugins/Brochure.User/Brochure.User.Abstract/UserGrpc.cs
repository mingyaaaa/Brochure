// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/user.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace User.Rpc {
  public static partial class UserService
  {
    static readonly string __ServiceName = "User.Rpc.UserService";

    static readonly grpc::Marshaller<global::User.Rpc.UserRequest> __Marshaller_User_Rpc_UserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::User.Rpc.UserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::User.Rpc.UserResponse> __Marshaller_User_Rpc_UserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::User.Rpc.UserResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::User.Rpc.FailIdsResponse> __Marshaller_User_Rpc_FailIdsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::User.Rpc.FailIdsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::User.Rpc.UpdateUserRequest> __Marshaller_User_Rpc_UpdateUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::User.Rpc.UpdateUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::User.Rpc.MutiUserRequest> __Marshaller_User_Rpc_MutiUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::User.Rpc.MutiUserRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::User.Rpc.UserRequest, global::User.Rpc.UserResponse> __Method_GetUser = new grpc::Method<global::User.Rpc.UserRequest, global::User.Rpc.UserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUser",
        __Marshaller_User_Rpc_UserRequest,
        __Marshaller_User_Rpc_UserResponse);

    static readonly grpc::Method<global::User.Rpc.UserRequest, global::User.Rpc.FailIdsResponse> __Method_DeleteUser = new grpc::Method<global::User.Rpc.UserRequest, global::User.Rpc.FailIdsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteUser",
        __Marshaller_User_Rpc_UserRequest,
        __Marshaller_User_Rpc_FailIdsResponse);

    static readonly grpc::Method<global::User.Rpc.UpdateUserRequest, global::User.Rpc.FailIdsResponse> __Method_UpdateUser = new grpc::Method<global::User.Rpc.UpdateUserRequest, global::User.Rpc.FailIdsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateUser",
        __Marshaller_User_Rpc_UpdateUserRequest,
        __Marshaller_User_Rpc_FailIdsResponse);

    static readonly grpc::Method<global::User.Rpc.MutiUserRequest, global::User.Rpc.UserResponse> __Method_Insert = new grpc::Method<global::User.Rpc.MutiUserRequest, global::User.Rpc.UserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_User_Rpc_MutiUserRequest,
        __Marshaller_User_Rpc_UserResponse);

    static readonly grpc::Method<global::User.Rpc.MutiUserRequest, global::User.Rpc.UserResponse> __Method_InsertMuti = new grpc::Method<global::User.Rpc.MutiUserRequest, global::User.Rpc.UserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertMuti",
        __Marshaller_User_Rpc_MutiUserRequest,
        __Marshaller_User_Rpc_UserResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::User.Rpc.UserReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UserService</summary>
    [grpc::BindServiceMethod(typeof(UserService), "BindService")]
    public abstract partial class UserServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::User.Rpc.UserResponse> GetUser(global::User.Rpc.UserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::User.Rpc.FailIdsResponse> DeleteUser(global::User.Rpc.UserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::User.Rpc.FailIdsResponse> UpdateUser(global::User.Rpc.UpdateUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::User.Rpc.UserResponse> Insert(global::User.Rpc.MutiUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::User.Rpc.UserResponse> InsertMuti(global::User.Rpc.MutiUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UserService</summary>
    public partial class UserServiceClient : grpc::ClientBase<UserServiceClient>
    {
      /// <summary>Creates a new client for UserService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UserService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::User.Rpc.UserResponse GetUser(global::User.Rpc.UserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::User.Rpc.UserResponse GetUser(global::User.Rpc.UserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::User.Rpc.UserResponse> GetUserAsync(global::User.Rpc.UserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::User.Rpc.UserResponse> GetUserAsync(global::User.Rpc.UserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUser, null, options, request);
      }
      public virtual global::User.Rpc.FailIdsResponse DeleteUser(global::User.Rpc.UserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::User.Rpc.FailIdsResponse DeleteUser(global::User.Rpc.UserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::User.Rpc.FailIdsResponse> DeleteUserAsync(global::User.Rpc.UserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::User.Rpc.FailIdsResponse> DeleteUserAsync(global::User.Rpc.UserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteUser, null, options, request);
      }
      public virtual global::User.Rpc.FailIdsResponse UpdateUser(global::User.Rpc.UpdateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::User.Rpc.FailIdsResponse UpdateUser(global::User.Rpc.UpdateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::User.Rpc.FailIdsResponse> UpdateUserAsync(global::User.Rpc.UpdateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::User.Rpc.FailIdsResponse> UpdateUserAsync(global::User.Rpc.UpdateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateUser, null, options, request);
      }
      public virtual global::User.Rpc.UserResponse Insert(global::User.Rpc.MutiUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::User.Rpc.UserResponse Insert(global::User.Rpc.MutiUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::User.Rpc.UserResponse> InsertAsync(global::User.Rpc.MutiUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::User.Rpc.UserResponse> InsertAsync(global::User.Rpc.MutiUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      public virtual global::User.Rpc.UserResponse InsertMuti(global::User.Rpc.MutiUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertMuti(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::User.Rpc.UserResponse InsertMuti(global::User.Rpc.MutiUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertMuti, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::User.Rpc.UserResponse> InsertMutiAsync(global::User.Rpc.MutiUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertMutiAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::User.Rpc.UserResponse> InsertMutiAsync(global::User.Rpc.MutiUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertMuti, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UserServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UserServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetUser, serviceImpl.GetUser)
          .AddMethod(__Method_DeleteUser, serviceImpl.DeleteUser)
          .AddMethod(__Method_UpdateUser, serviceImpl.UpdateUser)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_InsertMuti, serviceImpl.InsertMuti).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UserServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::User.Rpc.UserRequest, global::User.Rpc.UserResponse>(serviceImpl.GetUser));
      serviceBinder.AddMethod(__Method_DeleteUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::User.Rpc.UserRequest, global::User.Rpc.FailIdsResponse>(serviceImpl.DeleteUser));
      serviceBinder.AddMethod(__Method_UpdateUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::User.Rpc.UpdateUserRequest, global::User.Rpc.FailIdsResponse>(serviceImpl.UpdateUser));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::User.Rpc.MutiUserRequest, global::User.Rpc.UserResponse>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_InsertMuti, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::User.Rpc.MutiUserRequest, global::User.Rpc.UserResponse>(serviceImpl.InsertMuti));
    }

  }
}
#endregion
